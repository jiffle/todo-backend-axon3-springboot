buildscript {
    /*repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }*/
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.1.RELEASE'
	id "org.sonarqube" version "2.2"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.ltgt.errorprone'

group = 'net.jiffle'
version = '0.0.1'

description = "Todo Backend example using SpringBoot, Axon3 & Spock"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

ext {
  axonVersion = '3.0.1'
  springbootVersion = '1.5.1.RELEASE'
  spockVersion = '1.1-groovy-2.4-rc-3'
} 

repositories {
    mavenCentral()
	jcenter()
}

sourceSets {
	functionalTest {
		groovy {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/functional/groovy')
		}
		resources.srcDir file('src/functional/resources')
	}
}

configurations {
	functionalTestCompile.extendsFrom testCompile
	functionalTestRuntime.extendsFrom testRuntime
}

idea {
	module {
	   testSourceDirs += file('src/functional/java')
	   testSourceDirs += file('src/functional/resources')
	   scopes.TEST.plus += [configurations.functionalTestCompile]
	}
 }

eclipse {
	 classpath {
		 plusConfigurations += [ configurations.functionalTestCompile ]	
	 }
  }
 
dependencies {
	compile "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"
	compile "org.springframework.boot:spring-boot-starter-actuator:${springbootVersion}"
    compile "org.axonframework:axon-core:${axonVersion}"
    compile "org.axonframework:axon-spring:${axonVersion}"
    compile "org.axonframework:axon-spring-boot-autoconfigure:${axonVersion}"
    compile "com.jayway.jsonpath:json-path:2.0.0"
	compile "org.projectlombok:lombok:1.16.12"
// workaround for Lombok "cannot access javax.persistence.MappedSuperclass" error
	compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
	compile 'org.hibernate:hibernate-validator:5.4.0.Final'

	testCompile "org.codehaus.groovy:groovy-all:2.4.8"
	testCompile "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
	testCompile "org.spockframework:spock-spring:${spockVersion}"
	testCompile "cglib:cglib-nodep:3.2.4"
    testCompile "junit:junit:4.12"
    testCompile "org.axonframework:axon-test:${axonVersion}"
    testCompile "org.springframework:spring-test:4.3.6.RELEASE"
    testCompile "org.mockito:mockito-all:1.10.19"
	
	functionalTestCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
}

task functionalTest(type: Test, dependsOn: jar) {
	shouldRunAfter test
    group 'Verification'
    description 'Runs the functional tests.'
	testClassesDir = sourceSets.functionalTest.output.classesDir
	classpath = sourceSets.functionalTest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
	systemProperty('target.baseurl', System.getProperty("target.baseurl") ?: 'http://localhost:8080/')
	reports.html.destination = file("$reports.html.destination/functional")
}

check.dependsOn functionalTest
